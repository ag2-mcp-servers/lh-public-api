# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:39:49+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header, Path, Query

from models import (
    AirportResponse,
    CargoGetRouteOriginDestinationFromDateProductCodeGetResponse,
    CargoShipmentTrackingAWBPrefixAWBNumberGetResponse,
    OffersLoungesLocationGetResponse,
    OffersSeatmapsFlightNumberOriginDestinationDateCabinClassGetResponse,
    OperationsFlightstatusArrivalsAirportCodeFromDateTimeGetResponse,
    OperationsFlightstatusDeparturesAirportCodeFromDateTimeGetResponse,
    OperationsFlightstatusFlightNumberDateGetResponse,
    OperationsFlightstatusRouteOriginDestinationDateGetResponse,
    OperationsSchedulesOriginDestinationFromDateTimeGetResponse,
    ProductCode,
    ReferencesAircraftAircraftCodeGetResponse,
    ReferencesAirlinesAirlineCodeGetResponse,
    ReferencesAirportsNearestLatitudeLongitudeGetResponse,
    ReferencesCitiesCityCodeGetResponse,
    ReferencesCountriesCountryCodeGetResponse,
)

app = MCPProxy(
    description='',
    license={'name': 'LH', 'url': 'https://developer.lufthansa.com'},
    title='LH Public API',
    version='1.0',
    servers=[{'url': 'https://api.lufthansa.com/v1'}],
)


@app.get(
    '/cargo/getRoute/{origin}-{destination}/{fromDate}/{productCode}',
    description=""" Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Routes are available for today and up to days in the future. """,
    tags=['flight_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def retrieve_all_flights(
    origin: str,
    destination: str = ...,
    from_date: str = Path(..., alias='fromDate'),
    product_code: ProductCode = Path(..., alias='productCode'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve all flights
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cargo/shipmentTracking/{aWBPrefix}-{aWBNumber}',
    description=""" With this tracking service you can easily retrieve your shipment or flight status information. """,
    tags=['cargo_shipment_tracking'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def cargo_shipment_tracking_by_a_w_b_prefix_and_a_w_b_number_get(
    a_w_b_prefix: str = Path(..., alias='aWBPrefix'),
    a_w_b_number: str = Path(..., alias='aWBNumber'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Shipment Tracking
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/offers/lounges/{location}',
    description=""" Lounge information """,
    tags=['airport_lounge_info'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def offers_lounges_by_location_get(
    location: str,
    accept: str = Header(..., alias='Accept'),
    cabin_class: Optional[str] = Query(None, alias='cabinClass'),
    tier_code: Optional[str] = Query(None, alias='tierCode'),
    lang: Optional[str] = None,
):
    """
    Lounges
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/offers/seatmaps/{flightNumber}/{origin}/{destination}/{date}/{cabinClass}',
    description=""" Cabin layout and seat characteristics. """,
    tags=['flight_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_seat_maps_by_flight_and_cabin_class(
    flight_number: str = Path(..., alias='flightNumber'),
    origin: str = ...,
    destination: str = ...,
    date: str = ...,
    cabin_class: str = Path(..., alias='cabinClass'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Seat Maps
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/operations/flightstatus/arrivals/{airportCode}/{fromDateTime}',
    description=""" Status of all arrivals at a given airport up to 4 hours from the provided date time. """,
    tags=['flight_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_flight_status_arrivals_by_airport(
    airport_code: str = Path(..., alias='airportCode'),
    from_date_time: str = Path(..., alias='fromDateTime'),
    accept: str = Header(..., alias='Accept'),
    limit: Optional[str] = None,
    offset: Optional[str] = None,
):
    """
    Flight Status at Arrival Airport
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/operations/flightstatus/departures/{airportCode}/{fromDateTime}',
    description=""" Status of all departures from a given airport up to 4 hours from the provided date time. """,
    tags=['flight_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_flight_status_departures_by_airport(
    airport_code: str = Path(..., alias='airportCode'),
    from_date_time: str = Path(..., alias='fromDateTime'),
    accept: str = Header(..., alias='Accept'),
    limit: Optional[str] = None,
    offset: Optional[str] = None,
):
    """
    Flight Status at Departure Airport
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/operations/flightstatus/route/{origin}/{destination}/{date}',
    description=""" Status of flights between a given origin and destination on a given date. """,
    tags=['flight_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def operations_flightstatus_route_date_by_origin_and_destination_get(
    origin: str,
    destination: str = ...,
    date: str = ...,
    accept: str = Header(..., alias='Accept'),
    limit: Optional[str] = None,
    offset: Optional[str] = None,
):
    """
    Flight Status by Route
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/operations/flightstatus/{flightNumber}/{date}',
    description=""" Status of a particular flight (boarding, delayed, etc.). """,
    tags=['flight_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def operations_flightstatus_by_flight_number_and_date_get(
    flight_number: str = Path(..., alias='flightNumber'),
    date: str = ...,
    accept: str = Header(..., alias='Accept'),
    limit: Optional[str] = None,
    offset: Optional[str] = None,
):
    """
    Flight Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/operations/schedules/{origin}/{destination}/{fromDateTime}',
    description=""" Scheduled flights between given airports on a given date. """,
    tags=['flight_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_flight_schedules_by_origin_destination_and_date(
    origin: str,
    destination: str = ...,
    from_date_time: str = Path(..., alias='fromDateTime'),
    accept: str = Header(..., alias='Accept'),
    direct_flights: Optional[bool] = Query(None, alias='directFlights'),
    limit: Optional[str] = None,
    offset: Optional[str] = None,
):
    """
    Flight Schedules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/references/aircraft/{aircraftCode}',
    description=""" List all aircraft types or one specific aircraft type. """,
    tags=['aviation_reference_data'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def references_aircraft_by_aircraft_code_get(
    accept: str = Header(..., alias='Accept'),
    aircraft_code: str = Path(..., alias='aircraftCode'),
    limit: Optional[str] = '20',
    offset: Optional[str] = '0',
):
    """
    Aircraft
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/references/airlines/{airlineCode}',
    description=""" List all airlines or one specific airline. """,
    tags=['aviation_reference_data'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def references_airlines_by_airline_code_get(
    accept: str = Header(..., alias='Accept'),
    airline_code: str = Path(..., alias='airlineCode'),
    limit: Optional[str] = '20',
    offset: Optional[str] = '0',
):
    """
    Airlines
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/references/airports/nearest/{latitude},{longitude}',
    description=""" List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point. """,
    tags=['aviation_reference_data'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def references_airports_nearest_by_latitude_and_longitude_get(
    latitude: int,
    longitude: int = ...,
    accept: str = Header(..., alias='Accept'),
    lang: Optional[str] = None,
):
    """
    Nearest Airports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/references/airports/{airportCode}',
    description=""" List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language. """,
    tags=['aviation_reference_data'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def references_airports_by_airport_code_get(
    accept: str = Header(..., alias='Accept'),
    airport_code: str = Path(..., alias='airportCode'),
    lang: Optional[str] = None,
    limit: Optional[str] = '20',
    offset: Optional[str] = '0',
    l_hoperated: Optional[bool] = Query(None, alias='LHoperated'),
):
    """
    Airports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/references/cities/{cityCode}',
    description=""" List all cities or one specific city. It is possible to request the response in a specific language. """,
    tags=['aviation_reference_data'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def references_cities_by_city_code_get(
    accept: str = Header(..., alias='Accept'),
    city_code: str = Path(..., alias='cityCode'),
    lang: Optional[str] = None,
    limit: Optional[str] = '20',
    offset: Optional[str] = '0',
):
    """
    Cities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/references/countries/{countryCode}',
    description=""" List all countries or one specific country. It is possible to request the response in a specific language. """,
    tags=['aviation_reference_data'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def references_countries_by_country_code_get(
    accept: str = Header(..., alias='Accept'),
    country_code: str = Path(..., alias='countryCode'),
    lang: Optional[str] = None,
    limit: Optional[str] = '20',
    offset: Optional[str] = '0',
):
    """
    Countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
