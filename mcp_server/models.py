# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:39:49+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Coordinate(BaseModel):
    Latitude: Optional[float] = Field(
        None,
        description='Decimal latitude. Range: -90 (South Pole) to +90 (North Pole), e.g. “51.540”.',
    )
    Longitude: Optional[float] = Field(
        None,
        description='Decimal longitude. Range: -180 (West of Prime Meridian) to +180 (East of Prime Meridian).',
    )


class Link(BaseModel):
    field_Href: Optional[str] = Field(
        None, alias='@Href', description='Link to actual a resource.'
    )
    field_Rel: Optional[str] = Field(
        None,
        alias='@Rel',
        description='Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource).',
    )


class Name(BaseModel):
    field_: Optional[str] = Field(None, alias='$')
    field_LanguageCode: Optional[str] = Field(None, alias='@LanguageCode')


class CargoGetRouteOriginDestinationFromDateProductCodeGetResponse(BaseModel):
    pass


class ProductCode(Enum):
    FAN = 'FAN'
    FCO = 'FCO'
    FCP = 'FCP'
    FDG = 'FDG'
    FTF = 'FTF'
    FUN = 'FUN'
    FWN = 'FWN'
    YCO = 'YCO'
    YCP = 'YCP'
    YDG = 'YDG'
    YNB = 'YNB'
    YNZ = 'YNZ'
    YTF = 'YTF'
    YUN = 'YUN'
    ZXB = 'ZXB'
    ZXF = 'ZXF'
    ZXR = 'ZXR'


class CargoShipmentTrackingAWBPrefixAWBNumberGetResponse(BaseModel):
    pass


class OffersLoungesLocationGetResponse(BaseModel):
    pass


class OffersSeatmapsFlightNumberOriginDestinationDateCabinClassGetResponse(BaseModel):
    pass


class OperationsFlightstatusArrivalsAirportCodeFromDateTimeGetResponse(BaseModel):
    pass


class OperationsFlightstatusDeparturesAirportCodeFromDateTimeGetResponse(BaseModel):
    pass


class OperationsFlightstatusRouteOriginDestinationDateGetResponse(BaseModel):
    pass


class OperationsFlightstatusFlightNumberDateGetResponse(BaseModel):
    pass


class OperationsSchedulesOriginDestinationFromDateTimeGetResponse(BaseModel):
    pass


class ReferencesAircraftAircraftCodeGetResponse(BaseModel):
    pass


class ReferencesAirlinesAirlineCodeGetResponse(BaseModel):
    pass


class ReferencesAirportsNearestLatitudeLongitudeGetResponse(BaseModel):
    pass


class ReferencesCitiesCityCodeGetResponse(BaseModel):
    pass


class ReferencesCountriesCountryCodeGetResponse(BaseModel):
    pass


class Names(BaseModel):
    Name_1: Optional[List[Name]] = Field(
        None, alias='Name', description='Array: language specific full name of airport.'
    )


class Position(BaseModel):
    Coordinate_1: Optional[Coordinate] = Field(None, alias='Coordinate')


class Airport(BaseModel):
    AirportCode: Optional[str] = Field(
        None, description='3-letter IATA airport code, e.g. “TXL”.'
    )
    CityCode: Optional[str] = Field(
        None, description='3-letter IATA city code, e.g. “BER”.'
    )
    CountryCode: Optional[str] = Field(
        None, description='2-letter ISO 3166-1 country code, e.g. “DE”.'
    )
    LocationType: Optional[str] = Field(
        None, description=' “Airport”, “RailwayStation” or “BusStation”.'
    )
    Names_1: Optional[Names] = Field(
        None, alias='Names', description='Container for airport names.'
    )
    Position_1: Optional[Position] = Field(
        None,
        alias='Position',
        description='Physical location of an airport. This data section is optional and therefore not always present.',
    )
    TimeZoneId: Optional[str] = Field(None, description='Time zone name airport is in')
    UtcOffset: Optional[float] = Field(
        None, description='Hour offset of airport to UTC time zone'
    )


class Airports(BaseModel):
    Airport_1: Optional[Airport] = Field(None, alias='Airport')


class Meta(BaseModel):
    field_Version: Optional[str] = Field(None, alias='@Version')
    Link_1: Optional[List[Link]] = Field(
        None,
        alias='Link',
        description='Array: links to resource itself and other related resources.',
    )
    TotalCount: Optional[int] = None


class AirportResource(BaseModel):
    Airports_1: Optional[Airports] = Field(
        None, alias='Airports', description='Container for airport elements.'
    )
    Meta_1: Optional[Meta] = Field(
        None, alias='Meta', description='Container for meta links.'
    )


class AirportResponse(BaseModel):
    AirportResource_1: Optional[AirportResource] = Field(None, alias='AirportResource')
